<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Explanations on Henrique Dias</title>
    <link>https://henriquedias.com/categories/explanations/</link>
    <description>Recent content in Explanations on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <managingEditor>hacdias@gmail.com (Henrique Dias)</managingEditor>
    <webMaster>hacdias@gmail.com (Henrique Dias)</webMaster>
    <lastBuildDate>Wed, 10 Jun 2015 15:01:00 +0000</lastBuildDate>
    
	<atom:link href="https://henriquedias.com/categories/explanations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP - Diferenças entre &#39;&amp;&amp;/||&#39; e &#39;AND/OR&#39;</title>
      <link>https://henriquedias.com/blog/php-diferencas-operadores-logicos-precedencia/</link>
      <pubDate>Wed, 10 Jun 2015 15:01:00 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/php-diferencas-operadores-logicos-precedencia/</guid>
      <description>Há alguns dias publiquei um artigo onde expliquei as diferenças entre os operadores == e ===. Depois de partilhar esse artigo no Google Plus, a comunidade PHP Brasil sugeriu-me que falasse sobre as diferenças entre os operadores &amp;amp;&amp;amp;/|| e AND/OR.
Depois de ter pesquisado sobre estes quatro operadores, descobri que sim, realmente existem diferenças entre esses dois conjuntos de operadores.
Para exemplificar, vamos utilizar valores booleanos, ou seja, false e true (ou 0 e 1, respetivamente), e os operadores AND e &amp;amp;&amp;amp;.</description>
    </item>
    
    <item>
      <title>Modelo MVC - Uma breve explicação</title>
      <link>https://henriquedias.com/blog/mvc-uma-breve-explicacao/</link>
      <pubDate>Sat, 22 Nov 2014 16:02:56 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/mvc-uma-breve-explicacao/</guid>
      <description>A programação é algo fantástico que nos permite fazer qualquer coisa das mais diversas formas. Podemos criar, inovar, melhorar e até nos divertirmos. Existem várias formas de programar, várias maneiras.
Cada um, ao longo do tempo, vai adotando diversas formas de programar, diversas idiossincrasias que o vai distinguir ao longo do tempo. Mas o que vos trazemos hoje não é nenhuma idiossincrasia, é o modelo MVC.
MVC é um modelo de arquitetura de software que é muito utilizado atualmente mas, por vezes, pode tornar-se confuso inicialmente (como me aconteceu) mas, depois de alguma pesquisa, cheguei à conclusão de que é muito simples compreender este modelo.</description>
    </item>
    
    <item>
      <title>PHP e WordPress: comandos &#39;printf&#39; e &#39;sprintf&#39;</title>
      <link>https://henriquedias.com/blog/php-wordpress-comandos-printf-sprintf/</link>
      <pubDate>Sat, 13 Sep 2014 09:16:48 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/php-wordpress-comandos-printf-sprintf/</guid>
      <description>No último artigo sugeriram-me falar sobre as funções printf e sprintf que são utilizadas em massa no Wordpress e é isso que vou fazer! Vamos analisar cada uma das funções.
 Vou começar por analisar as duas funções em separado, explicando para que servem e dando alguns exemplos.
printf O nome desta função quer dizer print formatted, ou seja, &amp;ldquo;imprimir dados formatados&amp;rdquo;. Abaixo encontra um exemplo mais simples:
printf(&amp;quot;Olá mundo!</description>
    </item>
    
    <item>
      <title>PHP - Strings: interpolação e concatenação</title>
      <link>https://henriquedias.com/blog/php-interpolacao-concatenacao/</link>
      <pubDate>Tue, 09 Sep 2014 15:19:43 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/php-interpolacao-concatenacao/</guid>
      <description>Hoje vamos falar um pouco sobre PHP, mais precisamente no campo das strings, variáveis e concatenações. Como sabem, existem várias formas de inserir o valor de variáveis dentro de strings, mas qual será a &amp;ldquo;melhor&amp;rdquo; e mais rápida?
 Em primeiro lugar, vamos rever as formas de inserir variáveis dentro de strings atualmente já existentes:
&amp;lt;?php $foo = &#39;uma pessoa&#39;; $bar = &amp;quot;Eu sou &amp;quot; . $foo . &amp;quot;!&amp;quot;; // =&amp;gt; 1 $bar = &#39;Eu sou &#39; .</description>
    </item>
    
    <item>
      <title>PHP 5.6 - Funções Variádicas (Nova Sintaxe)</title>
      <link>https://henriquedias.com/blog/php-56-funcoes-variadicas-nova-sintaxe/</link>
      <pubDate>Sun, 31 Aug 2014 09:37:05 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/php-56-funcoes-variadicas-nova-sintaxe/</guid>
      <description>Há pouco mais de dois dias, foi lançada uma nova versão do PHP, a versão 5.6.0 que trouxe inúmeras novidades e incompatibilidades com as versões anteriores (ver aqui).
Hoje vamos falar de uma das diversas grandes novidades desta esplêndida atualização, as funções variádicas.
 Ao longo das versões 4.x e 5.x do PHP, os desenvolvedores já podiam utilizar funções variádicas através do uso da função func_get_args().
Se, por exemplo, quiséssemos criar uma função que fizesse a soma de todos os valores passados nos argumentos, bastaria fazermos assim:</description>
    </item>
    
    <item>
      <title>5 truques e dicas em PHP</title>
      <link>https://henriquedias.com/blog/truques-dicas-em-php/</link>
      <pubDate>Fri, 29 Aug 2014 16:47:20 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/truques-dicas-em-php/</guid>
      <description>A linguagem de programação PHP é das mais utilizadas atualmente do lado do servidor quando o assunto são páginas web.
Para os iniciantes ou mesmo profissionais, aqui estão 5 simples e úteis truques e dicas para aplicarem quando estão a escrever em PHP.
 1. Utilizar o operador ternário Nós já escrevemos um artigo sobre este operador que podem ver aqui. Para laços (loops) simples, podemos utilizar o operador ternário de forma a poupar espaço como podem ver no exemplo seguinte:</description>
    </item>
    
    <item>
      <title>PHP - Devemos usar a tag de fechamento ou não?</title>
      <link>https://henriquedias.com/blog/php-devemos-usar-tag-fechamento-ou-nao/</link>
      <pubDate>Wed, 27 Aug 2014 09:15:18 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/php-devemos-usar-tag-fechamento-ou-nao/</guid>
      <description>Recentemente comecei a reparar que muitos programadores omitiam a tag de fechamento dos ficheiros PHP e, obviamente, fiquei curioso.
Depois de uma pesquisa, trago-vos o porquê de não utilizar a tag ?&amp;gt; no final dos ficheiros.
 Em primeiro lugar, esta prática só deve ser realizada em ficheiros cujo seu conteúdo seja somente PHP e não contenha HTML, por exemplo.
O que acontece se&amp;hellip;? Vamos começar por debater a pergunta que vocês vêm aí em cima: o que acontece se omitirmos a tag de fechamento.</description>
    </item>
    
    <item>
      <title>PHP - (Algumas) tags dos DOCBlocks</title>
      <link>https://henriquedias.com/blog/php-tags-docblocks/</link>
      <pubDate>Mon, 11 Aug 2014 20:26:21 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/php-tags-docblocks/</guid>
      <description>Para quem desenvolve aplicações em PHP com outras pessoas ou mesmo sozinho, por vezes precisa de colocar comentários em vários locais para identificar os diversos processos que vão ocorrendo.
Os DocBlocks são (quase) fundamentais na vida dos programadores e estão disponíveis em várias linguagens. Vamos analisar as tags que existem nos de PHP e como os utilizar.
 Os DocBlocks em PHP são parte do PHPDoc, uma adaptação do sistema javadoc para a linguagem de programação PHP.</description>
    </item>
    
    <item>
      <title>Diferenças entre &#39;==&#39; e &#39;===&#39; em PHP</title>
      <link>https://henriquedias.com/blog/diferencas-entre-igual-identico-php/</link>
      <pubDate>Wed, 23 Jul 2014 18:31:23 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/diferencas-entre-igual-identico-php/</guid>
      <description>É habitual utilizarem-se diversos operadores quando o assunto é programação. Existem vários até: aritméticos, comparativos e outros.
Dentro de cada categoria existem vários sendo que a dos comparativos não é excepção e hoje trago-vos dois operadores comparativos, muito parecidos&amp;hellip; ou talvez não: == e ===.
Há já algum tempo que me questionava em relação ao uso de ambos os operadores pois não tinha a certeza de qual devia utilizar nas diversas situações que me apareciam.</description>
    </item>
    
    <item>
      <title>Operador Ternário ( ? ) em PHP</title>
      <link>https://henriquedias.com/blog/operador-ternario/</link>
      <pubDate>Tue, 22 Jul 2014 09:08:08 +0000</pubDate>
      <author>hacdias@gmail.com (Henrique Dias)</author>
      <guid>https://henriquedias.com/blog/operador-ternario/</guid>
      <description>Recentemente, escrevi um artigo onde explicava como fazer uma listagem web de uma tabela MySQL onde utilizei um operador que não tinha a certeza absoluta do que fazia e deixei a explicação um pouco vaga.
O operador em questão era o ponto de interrogação. Depois de uma pequena pesquisa, descobri que o seu nome é operador ternário e é um operador condicional.
Já utilizava este operador há algum tempo mas estava reticente em relação à sua sintaxe pois não tinha a certeza se o que estava a fazer estava 100% correto por isso decidi pesquisar.</description>
    </item>
    
  </channel>
</rss>